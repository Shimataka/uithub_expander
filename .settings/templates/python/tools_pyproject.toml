
[tool.hatch.build.targets.wheel]
packages = ["src/PACKAGENAME"]

[tool.pyright]
exclude = [
    "local/*",
    ".venv/*",
    "docs/*",
    "activate",
    "deactivate",
]

[tool.uv]
dev-dependencies = [
    "mypy>=1.14.1",
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "ruff>=0.9.2",
    "sphinx>=8.1.3",
    "esbonio>=0.16.5",
    "myst-parser>=4.0.0",
]

[tool.mypy]
files = [
    "src/**/*.py",
    "tests/**/*.py",
]
mypy_path = [
    "src",
    "tests"
]
exclude = [
    "**/local/**/*.py",
]
allow_redefinition = true
allow_untyped_globals = false
check_untyped_defs = true
color_output = true
disallow_incomplete_defs = true
disallow_subclassing_any = false
disallow_untyped_calls = false
disallow_untyped_decorators = false
disallow_untyped_defs = true
error_summary = true
ignore_missing_imports = true
implicit_reexport = true
namespace_packages = true
no_implicit_optional = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
show_traceback = true
strict = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = false

[tool.ruff]
exclude = [".venv","venv","__pycache__",".git","local","docs"]
line-length = 119
indent-width = 4
lint.select = [
    "ALL"
]
lint.ignore = [
    # bugbear ignore
    "B004", # Using `hasattr(x, "__call__")` to test if x is callable is unreliable.
    "B007", # Loop control variable `i` not used within loop body
    "B009", # Do not call `getattr` with a constant attribute value
    "B010", # [*] Do not call `setattr` with a constant attribute value.
    "B011", # Do not `assert False` (`python -O` removes these calls)
    "B028", # No explicit `stacklevel` keyword argument found
    # pydocstyle ignore
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in `__init__`
    "D205", # 1 blank line required between summary line and description
    "D209", # [*] Multi-line docstring closing quotes should be on a separate line
    "D400", # First line should end with a period
    "D401", # First line of docstring should be in imperative mood
    "D402", # First line should not be the function's signature
    "D404", # First word of the docstring should not be "This"
    "D415", # First line should end with a period, question mark, or exclamation point
    # pytest can do weird low-level things, and we usually know
    # what we're doing when we use type(..) is ...
    "E721", # Do not compare types, use `isinstance()`
    # eradicate
    "ERA001", # commented-out-code
    # pylint ignore
    "PLC0105", # `TypeVar` name "E" does not reflect its covariance;
    "PLC0414", # Import alias does not rename original package
    "PLR0124", # Name compared with itself
    "PLR0133", # Two constants compared in a comparison (lots of those in tests)
    "PLR0402", # Use `from x.y import z` in lieu of alias
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "PLR2044", # Line with empty comment
    "PLR5501", # Use `elif` instead of `else` then `if`
    "PLW0120", # remove the else and dedent its contents
    "PLW0603", # Using the global statement
    "PLW2901", # for loop variable overwritten by assignment target
    # ruff ignore
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
]
lint.fixable = [
    "ALL"
]
lint.unfixable = [
    "F401"
]
lint.mccabe.max-complexity = 10
lint.pydocstyle.convention = "google"
format.quote-style = "double"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101"]

[tool.pytest.ini_options]
addopts = "-vv --tb=short -s --cov=src/PACKAGENAME --cov-report html"
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["src"]
testpaths = ["tests"]

[tool.coverage.run]
source = ["src"]
omit = [
    "src/**/main.py",
    "src/**/__init__.py",
    "tests/**/*.py",
]
